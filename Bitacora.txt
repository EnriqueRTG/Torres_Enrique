usuarios -
productos -
categorias -
marcas -
imagenes_productos -
ordenes -
detalle_orden -
direcciones -
consultas -
contactos -
carritos -
facturas -
detalle_factura -

para utilizar composer (y gestionar todas las dependencias de mi proyecto) hay que habilitar en php.ini -> extension=zip 
y el flujo de trabajo sera clonar proyecto -> ejecutar composer install -> trabajar, add y commit -> push

-> agregue dompdf para la generacion de las facturas y ordenes (composer require dompdf/dompdf)
-> agregue facker para la generacion de datos para los seeders (composer require --dev fakerphp/faker)
-> agregue codeigniter4-cart-module para el carrito (composer require jason-napolitano/codeigniter4-cart-module)
modificaciones en App/Config/Autoload.php:
public $psr4 = [
        APP_NAMESPACE => APPPATH,
        'Config'      => APPPATH . 'Config',
        'CodeIgniterCart' => ROOTPATH . 'vendor/jason-napolitano/codeigniter4-cart-module/src',
        'Dompdf\\' => ROOTPATH . 'vendor/dompdf/dompdf/src/Dompdf', 
    ];


 categorías:

    Máquinas de Tatuar
        Rotativas
        De Bobina
        Kits de Máquinas

    Tintas para Tatuajes
        Negras y Grises
        Colores
        Sets de Tintas

    Agujas y Cartuchos
        Agujas de Tatuaje
        Cartuchos de Agujas
        Grips Desechables

    Fuentes de Poder
        Fuentes de Poder para Tatuaje
        Pedales y Cables

    Mobiliario y Accesorios
        Camillas y Sillas
        Lámparas y Lupas
        Apoyabrazos y Reposapiés

    Cuidado y Sanitización
        Jabones y Desinfectantes
        Guantes y Mascarillas
        Film Protector y Vendajes

    Transferencia y Diseño
        Papel de Transferencia
        Lápices y Marcadores
        Plantillas y Guías

    Práctica y Aprendizaje
        Piel Sintética
        Kits de Práctica
        Libros y DVDs

    Merchandising
        Camisetas y Ropa
        Tazas y Accesorios
        Posters y Arte

    Otros
        Accesorios para Máquinas
        Caps para Tinta
        Vaselina y Productos para el Cuidado Posterior


-> para ejecutar un seeder en especifico 'php spark db:seed -s NombreDelSeeder' en mi caso el seeder que contiene a todos 'php spark db:seed -s DataBaseSeeder'

Pasos recomendados:

    Revisar y optimizar controladores existentes:

    Analiza tus controladores actuales para asegurarte de que estén utilizando los nuevos modelos y entidades de manera eficiente.
    Busca oportunidades para mejorar la legibilidad, la organización y la reutilización del código.
    Implementa buenas prácticas de programación y patrones de diseño, como la inyección de dependencias y la separación de responsabilidades.
    Asegúrate de que los controladores manejen correctamente la validación de datos y los errores.

    Actualizar las vistas:

    Adapta tus vistas para utilizar los datos proporcionados por los nuevos modelos y entidades.
    Implementa un diseño responsive y atractivo utilizando Bootstrap 5.
    Optimiza el rendimiento de las vistas, minimizando el uso de recursos y mejorando los tiempos de carga.
    Asegúrate de que las vistas sean accesibles y fáciles de usar para todos los usuarios.

    Implementar funcionalidades faltantes:

    Identifica las funcionalidades que aún no están implementadas en tu sistema y priorízalas según su importancia.
    Desarrolla los controladores, modelos y vistas necesarios para implementar estas funcionalidades.
    Asegúrate de que las nuevas funcionalidades se integren correctamente con el resto de tu aplicación.

    Probar exhaustivamente:

    Realiza pruebas unitarias y de integración para asegurarte de que todas las funcionalidades de tu sistema funcionen correctamente.
    Prueba tu aplicación en diferentes dispositivos y navegadores para verificar su compatibilidad y capacidad de respuesta.
    Solicita a otros usuarios que prueben tu aplicación y proporcionen comentarios sobre su experiencia.

    Optimizar el rendimiento:

    Utiliza herramientas de profiling y benchmarking para identificar áreas de mejora en el rendimiento de tu aplicación.
    Optimiza las consultas a la base de datos, el uso de memoria y otros recursos.
    Implementa técnicas de caché para mejorar los tiempos de carga.

    Seguridad:

    Realiza una auditoría de seguridad para identificar posibles vulnerabilidades en tu aplicación.
    Implementa medidas de seguridad para proteger tu aplicación y los datos de tus usuarios, como la validación de entradas, la prevención de ataques XSS y CSRF, y la protección contra inyección SQL.

    Documentación:

    Documenta tu código, incluyendo comentarios claros y descriptivos en tus controladores, modelos, vistas y otras partes de tu aplicación.
    Crea una documentación de usuario que explique cómo utilizar las diferentes funcionalidades de tu e-commerce.

Consideraciones adicionales:

    Control de versiones: Utiliza un sistema de control de versiones como Git para llevar un seguimiento de los cambios en tu código y facilitar la colaboración si trabajas en equipo.
    Despliegue: Planifica y ejecuta el despliegue de tu aplicación en un servidor de producción, asegurándote de que todos los componentes estén configurados correctamente.
    Mantenimiento: Realiza un mantenimiento regular de tu aplicación, incluyendo actualizaciones de seguridad, corrección de errores y mejoras en el rendimiento.

Conclusión:

Al seguir estos pasos, podrás refactorizar y mejorar tu proyecto de e-commerce de manera efectiva, garantizando una estructura de código sólida, funcionalidades completas, un buen rendimiento y una experiencia de usuario satisfactoria.


--> queda pendiente revisar 'contactos, productos' no carga el seeder

netstat -nao|findstr 3306 -->> para saber que proceso cerrar para liberar el puerto 3306

11/01/2025
realice el listado de los productos desde el panel del admin
realice las funciones de referencia en los modelos de producto, marca, categoria e imagenes
realice funciones especificas en el modelo de productos

PENDIENTES:
refactorizar el controlador de catalogo: mover los filtros y consultas al modelo
refactorizar el modelo de productos agregando el filtro de marcas: asi como se implemento el filtro de categorias
refactorizar la validacion de session que esta en catalogo
realizar las funciones especificas de productos y los demas modelos
revisar funciones de consultas de mis modelos, como las validaciones de datos y sus respectivos mensajes
refactorizar el alta y modificacion de productos, categorias y marcas, como de cualquier registro... ya que validaciones van en sus respectivos modelos y las inserciones y updates se deben realizar en los modelos, en los controladores solo deberian ir el llamado a dichas funciones, donde se le pasa como parametron el set de datos optenidos el getPost
finalizar funcionalidad de gestion de productos: realizar vista y controlador de alta, modificacion y detalles.
generar filtro de productos de baja y productos sin stock y/o bajo stock

16/01/2025
funcionadad de marcas necesita:
    - que el buscador funcione para traer todas las marcas (LISTO)
    - las marcas que se van agregando tienen que estar arriba en la lista (LISTO)
    - si no se puede agregar la marca tiene que aparecer el mensaje de error (TESTEAR)
    - se deben probar los mensajes exitos de alta, modificacion y baja (LISTO)
    - a la hora de crear o editar las marcas, agregar al formulario el campo 'descripcion' (LISTO)

avanzar aplicando exatamente las mismas funcionalidades para categorias

20/01
    - aplicar paginacion
    - guardar filtro aunque se refresque la pagina (LISTO)
    - al editar un registro inactivo pasarlo a 'activo' (LISTO)
    
21/01
    - aplicación de paginacion a medias... se genera la cantidad correcta de links para al paginacion pero no puedo navegar usandolos
        -> revisar Pager.php, documentacion, script, revisar nuevo funcion (buscarMarca())
    - se rompio los tooltips, debo hacer que vuelvan a funcionar previa a la implementacion de la paginacion (LISTO)
    - el buscador realiza la busqueda entre todos los registros en base al filtro aplicado, por defecto todos (LISTO)

23-01
Para agregar la biblioteca del carrito de compras:
    - la agrego al proyecto:  composer require jason-napolitano/codeigniter4-cart-module
    - configuro las rutas en app/config/Autoload.php agrego en $psr4: 'CodeIgniterCart' => ROOTPATH . 'vendor/jason-napolitano/codeigniter4-cart-module/src',
    - modifico la linea de codigo del archivo que se encuentra en vendor/jason-napolitano/codeigniter4-cart-module/src/Config/Service.php: reemplazo 'return new \JasonN\Cart\Cart();' por 'return new \CodeIgniterCart\Cart();'
    - link de la biblioteca: https://github.com/jason-napolitano/codeigniter4-cart-module
 
24/01
Trabajando en categorias:
    - actualizar migration y modelo. Tambien estructura de la tabla. (LISTO)
    - aplicar paginacion. (LISTO)
    - implementar alta, baja y modificacion. (LISTO)
    - probar los mensajes de las operacion, incluso las de validaciones a los datos. (LISTO)
    - implementar filtros
    - implementar buscador

    - implementar correctamente el partial de mensajes de error o exito.. solo aparece el de exito (LISTO)

25/01


01/02
Falta:
    - terminar el modulo de:
        Marcas: falta paginacion.
        Categorias: falta paginacion
        Productos: alta, baja y modificacion
        Contactos: altas. Notificacion al correo del admin (opcional) -> vistas de: lista de mensajes de contactos (usuarios no registrados). Y vista de mensaje.
        Mensajes: altas. Notificacion al correo del admin como usuario (opcional) -> vista de: lista de mensajes de usuairos registrados. y vista de conversaciones con cada usuario.
        Ordenes: alta, baja y modificacion. Generacion PDF y/o enviar al correo para ambos (opcional). Notificacion al administrador al correo (opcional) 
        Facturacion: alta, baja y modificacion. Generacion PDF y/o enviar al correo (opcional). Notificacion al usuario por correo (opcional) -> operacion que existe cuando el administrador da por cumplida exitosamente la orden.
        Avisos-Alertas (opcional): notificiones de mensajes, contactos, ordenes y facturas
        Perfil Usuario: editar informacion personal o cerrar cuenta. Seccion de pedidos con sus estados (ordenes) y vista o pdf de factura en caso de estar concretada. Mensajes.
    - agregar resposividad a todas las vistas (mobile y desktop)
    - cambiar las fuentes, las paletas de colores e imagenes
    - generar la documentacion (ERS)

03/02
    Categoria: alta, baja, modificacion, paginacion, filtracion, busqueda (LISTO)
    Cuestiones a tener en cuenta a medida que desarrolle lo faltante:
        - Generar Componentes Reutilizables
        - Generar funciones javascript Reutilizables
        - optimizar consultas SQL
        - Caché: Si ciertos datos no cambian con frecuencia (por ejemplo, categorías o productos), considera implementar un sistema de caché. CodeIgniter tiene soporte integrado para caché.
        - Documentación del Código: Asegúrate de documentar tu código, especialmente las funciones complejas o las que tienen lógica de negocio importante. Usa comentarios claros y descriptivos.
        - Uso de Constantes y Configuraciones: Evita usar valores "hardcodeados" en tu código. En su lugar, utiliza constantes o configuraciones.
        - Arquitectura Modular: Si tu proyecto crece, considera dividirlo en módulos. CodeIgniter permite crear módulos independientes para cada funcionalidad (por ejemplo, módulo de categorías, módulo de productos, etc.).
        - API RESTful: Si planeas expandir tu ecommerce a una aplicación móvil o integrarlo con otros sistemas, considera implementar una API RESTful en CodeIgniter.
        - Validación y Sanitización: Asegúrate de validar y sanitizar todos los datos que provienen del usuario (por ejemplo, en formularios o parámetros de URL). ($texto = $this->request->getGet('texto', FILTER_SANITIZE_STRING);)
        - Manejo de Errores: Implementa un manejo adecuado de errores. Por ejemplo, si una consulta SQL falla, muestra un mensaje de error amigable en lugar de exponer detalles técnicos.
        - Pruebas Unitarias: Implementa pruebas unitarias para tus modelos y controladores. CodeIgniter tiene soporte para PHPUnit. 
            public function testFiltrarCategorias()
                {
                    $resultado = $this->categoriaModel->filtrarCategorias('', 'activo', 1);
                    $this->assertNotEmpty($resultado);
                }
        -Análisis de Código: Usa herramientas como PHPStan o Psalm para analizar la calidad de tu código y detectar posibles errores.
    
    SOLUCIONAR: los registros de las paginaciones a excepcion de la primera pagina no realizan alguna accion al hacer click en editar o eliminar en el registro seleccionado.
                

04/02
    MODULO CATEGORIA (LISTO)

06/02
    MODULO MARCAS (LISTO)

08/02
    MODULOS PRODUCTOS (EN PROCESO)

09/02
    MODULO PRODUCTOS:
        tooltips (COMPLETO)
        busqueda (COMPLETO)
        filtros  (COMPLETO)
        paginacion (COMPLETO)
        breadcrumb (COMPLETO)
        mensajes (COMPLETO)
        vistas:
            producto (COMPLETO)
            editar (EN PROCESO) // implementacion de funcionalidad
            modal eliminacion (COMPLETO)
            crear (EN PROCESO) // implementacion de funcionalidad
    
    FALTARIA:
    ALTA DE PRODUCTOS (IMPLICA ALTA, BAJA Y MODIFICAICON DE IMAGENES ASOCIADAS)
    MODULO ORDENES (ALTA, BAJA, MODIFICACION, LISTADO Y VISUALIZACION DE ORDEN PARA ADMIN Y CLIENTE SEGUN CORRESPONDA. IMPLICA GENERACION DE COMPROBANTE PDF. OPCIONAL: CORREO ELECTRONICO)
    MODULO DE FACTURAS (ALTA, LISTA Y VISUALIZACION DE FACTURA PARA ADMIN Y CLIENTE SEGUN CORRESPONDA. IMPLICA GENERACION DE PDF. OPCIONAL: CORREO ELECTRONICO)
    MODULO DE PERFIL DE CLIENTE (ORDENES, CONSULTAS E INFO PERSONAL: ACCEDER A HISTORIAL DE PEDIDOS CON SUS FACTURAS ADJUNTAS SI CORRESPONDE, HISTORIAS DE CONSULTAS REALIZADAS CON SUS RESPUESTAS SI CORRESPONDE, PRESENTACION Y EDICION DE INFORMACION PERSONAL. OPCIONAL: ELIMINACION DE CUENTA )
    MODULO DE CONTACTOS Y CONSULTAS PARA EL ADMINISTRADOR.
    RESPONSIVIDAD PARA TODAS LAS VISTAS (DESKTOP, TABLET Y MOVILE)
    MEJORAR LOS ESTILOS PARA QUE SEA MAS ATRACTIVO
    APLICAR Y REVISAR COMENTARIOS Y DOCUMENTACION 
    GENERAR ERS (ESPECIFICACION DE REQUERIMIENTOS DE SOFTWARE)